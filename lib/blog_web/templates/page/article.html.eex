<div class="article">
    <h1 class="article-title">TCR (test && commit || revert). How to use? Alternative to TDD?</h1>

    <div class="article-info">
        <img class="author-thumb" src="https://cdn-images-1.medium.com/fit/c/50/50/1*YJrv7h2JQjn5lI53rpzfcw.jpeg" />
        <div class="article-info-details">
            <p class="name">Thomas Deniffel</p>
            <p class="meta">Nov 14, 2018 · 13 min read</p>
        </div>
    </div>

    <img src="https://cdn-images-1.medium.com/max/800/1*DrKc7wEs4O5q6mwUCy0dCg.jpeg" />
    <p><tt>test && commit || revert (TCR)</tt> was introduced by Kent Beck some weeks ago. Every time you run a test, your code gets either committed or deleted. This has a profound impact on how you develop software and what becomes possible.</p>
    <p>Deleting code on every failed test? This sound unintuitive and it is. But it was the same with TDD (just think about the three absurd rules of TDD). After digging a bit deeper, you will gain more understanding of how to write code anyway. This post takes you through the journey, I took with our Meetup-Group.</p>
    <p><i>tl;dr TCR has great potential after you got used to it. It contains two sperate ideas: test && commit for collaborating in teams and test || reset as “alternative” to TDD. We did an example and it worked fine.</i></p>

    <h2>How low can you go?</h2>
    <p>“Limbo lower now; Limbo lower now; How low can you go?” is the spoken refrain of Chubby Checkers “Libo rock.” Kent Beck uses this phrase for asking, how tight you can shorten the integration-cycle in a software project to scale the teams massively, for example to 100.000 Programmers working at one project.</p>

    <h2>Integrate faster!</h2>
    <p>We saw the first wave of integration-time shorting with the rise of Continous Integration which preached us to integrate daily or at least weekly to write better software. Daily is not “low” enough, and Limbo asks, “How low can you go?”</p>

    <h2>Ideal: Google Docs</h2>
    <p>My first thought to how low integration time can be is Google Docs. It allows writing with many different persons simultaneously in the same document while seeing each other’s cursor. In Google Docs we resolve conflicts as soon as they appear (most of them automatically), and we “check-in” (in a Git-Metaphor) in real-time while typing. If you zoom out, you can imagine a whole team or even an entire company, that is working on a complete folder-tree of Google-Docs saved in Google Drive. Each person has permissions per folder and therefore per subtree, and everyone can freely create, change and delete documents while these actions are propagated immediately to their colleagues. No blocking, no delay.</p>

    <p>So the question “How low can you go?” is answered for via Google Docs (and Google Drive). So, why don’t we put all our source-code in a particular form of Google Docs?</p>

    <p>Note: maybe we will — the idea sounds great; we see the first steps with Visual Studios Remote capabilities.</p>

    <h2>Source Code != Documents</h2>
    <p>The Problem with Google Docs: We don’t write the documents in plain English. The code is much more sensitive than plain English: Either it is syntactically incorrect (it does not build), or it is semantically incorrect (the tests do not pass). Moreover, our code has to be globally correct and not only in one file, because we use all source-files (simplified!) the build and test process. Therefore the second principle of Limbo (see below) is hurt with the Google Docs solution: “No one is allowed to cause others (including users) problems.” Actually, we are most of the time in an incorrect state, for example, while we are typing a variable name.</p>

    <h2>AST Transformations</h2>
    <p>How to resolve this? The trick is to stay consistently in a green state. If we achieve this, we can always merge without causing problems for others. Let’s look at the syntactical problems first. What happens if our program does not compile? It means that our compiler can’t convert our source-code into an abstract syntax tree (AST). An easy solution is, therefore, to manipulate the AST directly with a projectional editor. This editor allows only valid transformations of the syntax-tree. You can think of projectional editing as a set of changes of the AST.</p>

    <p>MPS from JetBrains allows creating DSLs (Domain Specific Languages) which do this. Projectional editing leads to problems with current programming languages: The designers did not create these for this type of programming.</p>

    <h2>A Git Prototype</h2>
    <p>There is a more natural solution for us programmers: We only synchronize if we are in a green state (program compile and tests pass). This type of synchronization works with current languages and with Git smoothly. To do so, we just extend our test command:</p>

    <pre>test && commit</pre>
    
    <p>This command commits the code as soon our tests pass, which means that we compiled successfully as well; therefore we are green — syntactically and semantically.</p>

    <h2>Limbo Principles</h2>
    <p>Great! We have `test && commit` and therefore the first part of TCR. Let’s revisit the two Limbo principles as suggested by Kent Beck:</p>

    <ol>
        <li>Everyone is working on (and production is executing) the same program, represented by a single abstract syntax tree.</li>
        <li>No one is allowed to cause others (including users) problems.</li>
        <li>We kind of solved the second problem. We are not synchronizing yet (we commit, but do not push) and even if we did, we would only propagate green code: No problems for others.</li>
    </ol>
    
    <h2>From Limbo to a Git Workflow</h2>
    
    <p>It is time to solve the first principle. If we worked in Google Docs, this would have been solved for us already. However, we are working with Git. Therefore, we can run this script (from Kent Beck):</p>

    <pre>
<b>while(true);</b>
  do
  git <b>pull</b> -- rebase;
  git <b>push</b>;
done;</pre>

    <p>As soon as we do our `commit && test`, the code gets pushed. As soon as someone else pushes, the code gets merged (just like in Google Docs except that we manually have to commit). We have everything for synchronization and to archive the first of the two principles.</p>

    <p>Kent Beck suggests more than the solution to Limbo, we have seen so far:</p>

    <pre>test && commit || revert</pre>

    <p>The prototype for a collaboration tool is working (demo below)! However, is only half of TCR, which consists of two parts:</p>
    <pre>
    test && commit
    test || revert</pre>

    <p>The first part is for collaboration in the Limbo style (together with the push/pull loop). The second leads to a programming methodology like TDD (test driven development). To clarify the `&&` and `||` look at this behavior:</p>
    <pre>
$ echo “exit <b>0</b>” > test
$ <b>./test &&</b> echo “<b>commit</b>” || echo “<b>revert</b>”
<b>commit</b>
$ echo “exit <b>1</b>” > test
$ <b>./test &&</b> echo “<b>commit</b>” || echo “<b>revert</b>”
<b>revert</b></pre>

    <p>Test-Frameworks result in the exit-code 0 if the tests pass and something greater `0`, if not. Which means:</p>

    <pre>
if(<b>test</b>().result == passed) 
    <b>commit</b>() // with the sync through the script
else
    <b>revert</b>() // to latest green state; via git reset</pre>

    <h2>Change the Act of Programming</h2>
    <p>TCR changes the way we create software dramatically (as TDD did). Every time we fail a test, we are in a red state and the ‘revert’ kicks in and reverts us to the last green state. It is like playing a computer game. Every time we die, we wake up the last checkpoint, where we are save of the monsters.</p>
    <p>The ‘revert’ leads to very short iterations, because if we “invest” too much in a code at once, it becomes likely, that it gets deleted. With every new line, we introduce a new feature, that could fail. Moreover, our lost investment increases with every line. As we see later, this forces us to write minimal tests and only as much code as is necessary. This minimalism is good.</p>

    <h2>How TCR is it similar to TDD?</h2>
    <p>Let’s revisit Bob Martins three laws of TDD:</p>

    <ol>
        <li>You are not allowed to write any production code unless it is to make a failing unit test pass.</li>
        <li>You are not allowed to write any more of a unit test that is sufficient to fail; compilation failures are failures.</li>
        <li>You are not allowed to write any more production code that is sufficient to pass the one failing unit-test.</li>
    </ol>

    <p>TCR supports point three. If you write more production code than necessary, you produce an unneeded risk of deletion. You don’t even need discipline anymore to follow this rule, because you follow it naturally after you got used to TCR.</p>
    <p>TCR supports the second point as well because otherwise you are forced to write much of the production code at once. While writing, you are not able to test it, because this would reset your written code. Therefore the second point becomes natural as well.</p>
    <p>The first point still requires discipline. You start in a green state (no test). As soon you write code without tests, your semantic bugs are not detected by ‘test,’ and therefore the construct of TCR fails. A possible solution would be to add a coverage tool to the test, that fails if the coverage is not 100% (yes, I know the discussion of 100%!).</p>
    <p>I have to conclude, that TCR follows/supports the three laws of TDD. However, it is not TDD!</p>


    <h2>How TCR differs from TDD?</h2>
    <p>I am still not sure if TDD and TCR are not orthogonal (I am happy, to hear arguments for both sides). However, revisiting the process of both. Let’s start with TDD:</p>

    <ol>
        <li>We <b>begin</b> in Green (do: `test`)</li>
        <li>We create a <b>failing Unit-Test</b> and are in red (do: `test`)</li>
        <li>We <b>fix</b> the test to be Green again (do: `test` — as often as necessary to arrive in Green)</li>
        <li>We <b>refactor</b>. We are in green and stay in green (do: `test`)</li>
    </ol>

    <p>The significant difference is in the third step. As soon we run the tests, and we fail, your current attempt gets reset.</p>
    <p>Note to me: this reminds me somehow to functional programming, where we have a stateless transformation. With TDD, we have a state, because the current attempt doesn’t get reset (To-Do: Explore this in another post).</p>

    <p>For TCR, we need a specialization of TDD. Where we never come to the Red state or are at least as short as possible:</p>

    <ol>
        <li>We <b>start</b> Green (do: `test && commit || reset`)</li>
        <li>Write a <b>test</b> (do: `test && commit || reset src`)</li>
        <li><b>Fake</b> the implementation (do: `test && commit || reset src`)</li>
        <li><b>Refactor</b>, where you replace n Fakes with a real implementation (do: `test && commit || reset src`)</li>
    </ol>

    <p>Every step involves just one or a few lines of code. As you probably recognized, I’ve written `test && commit || reset src` with `src`. We see the Reason later in the example section.</p>
    <p>So the main difference is, that we feel with TDD very comfortable in the Red zone because it allows us to write production code. Therefore we can be quite a while in this phase and execute the tests often while we are there. We are in the Red state. On the other hand, in TCR, we try never to get in the Red state. If we recognize, we are there, ‘revert’ kicks in and brings us to the green state. Therefore you could see TCR as a ‘stateless’ (‘red-stateless’) version of TDD.</p>

    <h2>Stop Talking! Show me something.</h2>
    <p>As mentioned before, TCR consists of two parts:</p>
    <ol>
        <li>`test && commit` together with push/pull for collaboration</li>
        <li>`test || revert` as programming methodology (yea, I know, you need your commit here as well, but it no essential part)</li>
    </ol>
    <p>To try the first part, you need a project with multiple parts/files and programmers, who are work simultaneously. I describe it in a later blog post in more detail. I concentrate here on the second aspect; for this is a straightforward program like ‘Fibonacci’ enough.</p>
    <p>I start with a simple Java/JUnit/Gradle project, just because, it is very convenient for me. There is nothing special with the tooling. I am sure you can translate it into your favorite language and framework. The only requirement is that the tests return the code `0` on success and something other than `0` for failure — I know now test-framework, which does not provide this.</p>
    <p>Here the init structure:</p>

<pre>
.
├── # gradle stuff
└── src
 ├── main
 │ ├── java
 │ │ └── Fib.java
 └── test
 ├── java
 │ └── TestFib.java</pre>

    <p>Also, prepare Git:</p>

<pre>$ git init && git add . && git commit -m “init”</pre>

    <p>We can run our test with ‘./gradlew test’, so our ‘test && commit || reset’ is:</p>
    <pre>$ ./gradlew test && git commit -am working || git reset -- hard</pre>
    <p>what we call test, that it becomes natural to execute it:</p>

<pre>
$ echo “./gradlew <b>test</b> && git <b>commit</b> -am working || git <b>reset</b> — hard” > test
$ chmod +x test
$ ./test</pre>

    <p>We make sure that we have an execution environment:</p>

<pre>
public class TestFib {
  <b>@Test</b>
  public void nothing() { }
}
$ ./test</pre>

    <p>Great! We are done with our first TCR.</p>
    <p><i>Problem: Not compiling</i></p>
    <p>As we begin to code an uncertainty arises in me. Am I allowed to execute `./test`? As soon my program does not compile TCR reverts it. This kind of reverting the code is annoying, because it is fine, that my test is not compiling, because I specify my interface in the test first. Remember the second rule of TDD: “ You are not allowed to write any more of a unit test that is sufficient to fail; compilation failures are failures.”?</p>
    <p>Therefore I extend my TCR-command in the ‘test’ file with:</p>

<pre>
$ ./gradlew <b>build</b> -x test && (./gradlew <b>test</b> && git <b>commit</b> -am working || git <b>reset</b> — hard)
$ <b>echo</b> “./gradlew build -x test && (./gradlew test && git commit -am working || git reset — hard)” > <b>test</b></pre>

    <p>I add the condition that TCR proceeds if my program compiles. It still not commits, so all requirements for Limbo are met.</p>
    <p><i>Note: `-x test` is necessary, because grade would run the test as part of the build process.</i></p>
    <p>I can now specify the interface of my function:</p>

<pre>
@Test
public void fib1_1() {
  <b>assertEquals(1, Fib.fib(1));</b>
}</pre>

    <p>Sure enough, I get an error (`fib` is not defined), but it does not get reset. The next step is to fake the behavior so that I stay green:</p>

<pre>
public class Fib {
  public static int <b>fib</b>(int n) {
    <b>return 1;</b>
  }
}
$ ./test</pre>

    <p>I am green. TCR reverted nothing. Let’s start with the second test case:</p>

<pre>
@Test
public void fib2_1() {
  <b>assertEquals(1, Fib.fib(2));</b>
}
$ ./test</pre>

    <p>Still green.</p>

<pre>
@Test
public void fib3_2() {
  <b>assertEquals(2, Fib.fib(3));</b>
}
$ ./test</pre>

    <p>This test failed, and TCR deleted it. First surprise. Let’s add it again together with the faked behavior:</p>

<pre>
@Test
public void fib3_2() {
  <b>assertEquals(2, Fib.fib(3));</b>
}
- - - - - - - - - - - - - - - 
public static int fib(int n) {
  <b>if(n == 3)
    return 2;
  return 1;</b>
}
$ ./test</pre>

    <p>This method worked, and Git persisted it together with the test. Let’s take a little bit bigger step. `fib(7) = 13`</p>

<pre>
@Test
public void fib7_13() {
  <b>assertEquals(13, Fib.fib(7));</b>
}
— 
public static int fib(int n) {
  if(n == 3)
    return 2;
  <b>if(n == 7)
    return 13;</b>
  return 1;
}
$ ./test</pre>

    <p>This code works again. Time for a refactoring:</pre>

<pre>
public static int fib(int n) {
  <b>if(n == 1)
    return 1;
  return (n == 3) ? 2 : 13;</b>
}
$ ./test</pre>

    <p>Error! `fib(2)` fails. TCR reverted my code! Try again:</p>

<pre>
public static int fib(int n) {
  <b>if(n <= 2)
    return 1;
  return (n == 3) ? 2 : 13;</b>
}
$ ./test</pre>

    <p>Mini-Step: done! We still have duplication to remove: The `2`, `3` and `13` appear in the test and the code. Let’s remove them.</p>

<pre>
public static int fib(int n) {
  if(n <= 2)
    return 1;
  return <b>fib(n-1) — fib(n-2)</b>;
} </pre>

    <p>As my tests just told me, I was wrong; TCR reverted my code to a green state. Everything is working again. That’s good. Let’s try again:</p>

<pre>
public static int fib(int n) {
  if(n <= 2)
    return 1;
  return <b>fib(n-1) + fib(n-2)</b>;
}</pre>

    <p>That’s it. I’ve done Fibonacci using TCR with the concrete command:</p>

<pre>./gradlew <b>build</b> -x test && (./gradlew <b>test</b> && git <b>commit</b> -am working || git <b>reset</b> -hard)</pre>

    <p>Note: Maybe I should call it BTCR for `build && (test && || revert)`.</p>

    <p>Wait! What happens, if I pass negative integers? Let’s try it via an experiment as a test (as we would do it with TDD):</p>

<pre>
@Test(expected = IllegalArgumentException.class)
public void fibNegative_illegal() {
  <b>Fib.fib(-1);</b>
}
$ ./test</pre>

    <p>Aaarggg. TCR deleted my test/experiment! I am just glad, that I have already copied it in this post. Such kind of reverting is annoying — TCR should not revert our tests. On the one hand side, we should be able to add tests without understanding the code (without the fear, that it gets deleted all the time) on the other hand TCR should still revert our production code.</p>

    <p>Git should just revert the `src` folder, but not the `test` folder. `git reset` is not capable of doing this. Therefore, we have to replace it:</p>

<pre>
$ <b>git checkout HEAD — src/main/</b>
$ ./gradlew <b>build</b> -x test && (./gradlew <b>test</b> && git <b>commit</b> -am working || <b>git checkout HEAD — src/main/</b>)
$ <b>echo</b> “…” > <b>test</b></pre>

    <p>This command is too long, therefore:</p>
<pre>
$ echo “./gradlew test” > <b>runTests</b>
$ echo “./gradlew build -x test” > <b>buildIt</b>
$ echo “git commit -am working” > <b>commit</b>
$ echo “git checkout HEAD — src/main/” > revert
$ echo “./buildIt && (<b>./runTests && ./commit || ./revert</b>)” > <b>test</b>
$ chmod +x buildIt commit revert runTests test
</pre>

    <p>We have a very lean `test` now:</p>

    <pre>./buildIt && (./runTests && ./commit && ./revert)</pre>

    <p>This command does not delete our experiment:</p>

<pre>
@Test(expected = IllegalArgumentException.class)
public void fibNegative_illegal() {
  Fib.fib(-1);
}
$ ./test</pre>

    <p>We can implement now the guard:</p>
<pre>
public static int fib(int n) {
  <b>if(n < 0)
    throw new IllegalArgumentException();</b>
  if(n <= 2)
    return 1;
  return fib(n-1) + fib(n-2);
}</pre>

    <h2>“Limbo lower now; Limbo lower now; How low can you go?”</h2>

    <p>Can we go lower? Yes, we can!</p>

<pre>
$ cat test
<b>while true</b>
<b>do</b>
 ./buildIt && (./runTests && ./commit || ./revert)
<b>done</b></pre>

    <p>I created the Fibonacci project this way. What an experience. Every time, I made a mistake, some ghost hand pulled me back. It was almost, as I just paired with someone, who had an eye on my code!</p>
    <p>Note: The tooling has to improve. IntelliJ, for example, did not synchronize from the filesystem immediately.</p>

    <p><b>Conclusion</b></p>

    <p>I was the opinion that TCR can’t work. But Kent Beck wrote on his article “Try it — it is cheap.” Therefore I did — and it worked. Just one day later, we discussed TCR in our Meetup-Group (<a href="https://www.meetup.com/de-DE/Bavarian-Coding-Group/events/256370893/">Bavarian Coding Group</a>), and since then, I am convinced, that TCR could be a new TDD (a new version).<p>
    <p>I have never done a more significant project than Fibonacci, but I will. The experience is too good for not digging deeper. The collaboration aspect is also fascinating and worth exploring. Google Docs made the Proof of Concepts that Limbo is possible; now it is our time to proof (or proof the opposite!), that is is possible with Code.</p>

    <h2>Future posts — done</h2>

    <ul>
        <li><a href="https://medium.com/@tdeniffel/tcr-variants-test-commit-revert-bf6bd84b17d3">Variants and How to Implement TCR</a></li>
    </ul>

    <h2>Future posts — planned</h2>
    <ul>
        <li>TCR and TDD, stateless vs. stateful?</li>
        <li>How to use git stash to prevent Copy&Paste Pattern</li>
        <li>Patterns in TCR</li>
        <li>Collaboration example: Programming a Coffee-Maker</li>
        <li>Integrate TCR in your IDE</li>
    </ul>

    <h2>A long example</h2>
    <p>It currently implement a Ray Tracer using TCR. You find the first post here. Until now, it works fine.<p>

    <div class="article-outro">
        <ul class="tags">
            <li><a href="#">Programming</a></li>
            <li><a href="#">Limbo</a></li>
            <li><a href="#">Software Development</a></li>
            <li><a href="#">Tdd</a></li>
            <li><a href="#">Git</a></li>
        </ul>

        <div class="author-info">
            <img class="author-thumb" src="https://cdn-images-1.medium.com/fit/c/50/50/1*YJrv7h2JQjn5lI53rpzfcw.jpeg" />
            <div class="author-info-details">
                <p class="name">Thomas Deniffel</p>
                <p class="bio">Programmer, CTO at Skytala GmbH, Software Craftsman, DDD, Passion for Technology</p>
            </div>
        </div>
    </div>
    
</div>